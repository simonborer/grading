import { Qu } from './qu.js';

const qa = {
    assn1: {
        description: "Part 1: Choose something you've made that is publicly accessible, or put a new page on the internet!<br>Code quality is not a part of your grade for this assignment.<br>Write up the requirements.<br>Include the following: <ul><li>The URL of the page being tested</li><li>Screenshot or wireframes of the page</li><li>Link URLs</li><li>Copy</li></ul>Put this in a document<br><br>Part 2: Using our ad hoc tools, test the page for the following:<ul><li>HTML & CSS validation</li><li>Accessibility</li><li>JSHint errors/warnings</li><li>Lighthouse recommendations for Performance, Best Practices, & SEO</li><li>Dev tools security audit issues</li><li>Responsive layout issues</li><li>Form submission (if applicable)</li><li>Compliance for layout and content provided by your partner</li></ul>Log any issues in a spreadsheet<br>Provide all information that would be required to locate and understand the issue - without having to follow up with you.<br>Make sure your report is readable and understandable. <br>You are not critiquing the page - you are testing it. You can ignore any validation errors generated by 3rd-party libraries (CSS, JS, etc.) like jQuery, tailwind, or what have you. Ignoring or downplaying issues won't make your partner look good, and it won't save your partner any labour.",
        total: 10,
        req: [
            new Qu("Part 1: The URL of the page being tested", .5),
            new Qu("Part 1: Screenshot or wireframes of the page in its intended state - including desktop, tablet & mobile", .5),
            new Qu("Part 1: Link URLs", .5),
            new Qu("Part 1: Copy (i.e. the text content of the page)", .5),
            new Qu("Part 1: Submitted part 1 to me and your partner after 9am Toronto time, 01/06", -1),
            new Qu("Part 2: Test for HTML & CSS validation, accessibility, JSHint errors/warnings, Lighthouse recommendations for Performance, Best Practices, & SEO, dev tools security audit issues, responsive layout issues, Form submission (if applicable), Compliance for layout and content provided by your partner", 5),
            new Qu("Part 2: Provided all information required to locate and understand issues", 2),
            new Qu("Part 2: Report is readable and understandable", 1),
            new Qu("Part 2: Submitted part 2 after 9am Toronto time, 08/06", -0.5)
        ],
        fb: ['Could have had more detail identifying the origins of particular issues.']
    },
    lab5: {
        description: "Follow Github flow to fix accessibility errors in the HTML document.<br>If there are no accessibility errors remaining for you to fix, add some aesthetically pleasing styles to the page via the script tag in the HTML document's head.<br>Create a feature branch.<br>Fix one accessibility issue<br>Commit your changes. Use the command git pull origin main<br>Push your branch to remote<br>Create a pull request, tagging a classmate asking them for a code review.<br>Perform code reviews as requested<br>(remember, don't merge if there are conflicts!)",
        total: 2,
        url: {
            text: "gh classroom",
            url: "https://classroom.github.com/g/6-NeBNP9"
        },
        req: [
            new Qu("Followed branching model",1.5),
            new Qu("Successfully fixed an error or added a style",.5),
            new Qu("Submitted after 11/6", -0.25)
        ]
    },
    assn2: {
        description: "Follow Github flow to successfully follow the instructions described in the project README: In your own feature branch, create a new JavaScript module in the public/people-modules/ folder. Your module should export a new instance of the Person class described in public/people-modules/personConstructor.js The instance you export should contain two strings - your name and a custom string of your choosing (nice, SFW strings only please). These strings have constraints described in test/people.test.js. Import your module into public/main.js, and add your module's exported Person to the people array. Load public/index.html in a browser. You should see your module represented in an HTML table. Run the command npm install to install your development dependencies. Run the command npm test to run style lint and unit tests. Fix as required. Pull the main remote branch into your local feature branch. Fix any merge conflicts. Push your local feature branch to a remote feature branch. Create a pull request, and request a code review from a classmate. Respond to feedback, including making fixes as required. Respond to feedback requests from your classmates, and merging when appropriate.",
        total: 12,
        url: {
            text: "gh classroom",
            url: "https://classroom.github.com/g/F-r6Ryc_"
        },
        fb: ['Looks like you forgot to add your module to the unit test, though.'],
        req: [
            new Qu("created a new module in public/people-modules/", 1.5),
            new Qu("module exports new instance of Person", 1.5),
            new Qu("exported instance contains two strings - your name and a custom string, having constraints described in test/people.test.js", 1.5),
            new Qu("module imported into public/main.js; module's exported Person added to the people array", 1.5),
            new Qu("style lint fixed", 1.5),
            new Qu("unit tests fixed", 1.5),
            new Qu("merge conflicts resolved", 1.5),
            new Qu("code review passed", 1.5),
            new Qu("Submitted after 15/6",-1)
        ]
    },
    groupAssn: {
        description: "Using a shared git repository and a branching model, collaborate in groups of 4-5 in order a static HTML website that is made publicly available through a deployment pipeline (i.e. Netlify).<br>Your repository should include a file called 'README.MD' in the root folder of your repository (not your public site) that lists: <ul><li>The people in your group</li><li>The pages each person contributed</li><li>A description of your branching model</li></ul>Your website needs to have 11 pages - <ul><li>one homepage, which lists and links to the other 10 pages,</li><li>plus one page each for each item in the OWASP Top 10 Web Application Security Risks.</li></ul>Each page should have... <ul><li>a title representing the name of the security risk</li><li>the summary of the security risk that OWASP provides</li><li>your team's best \"plain-English\" description of the risk</li></ul>Each individual will be responsible for creating 2 pages, but after they've been created, you can collaborate on the content.<br> Deliverables for this assignment:<ul><li>In blackboard, submit the live URL of the new site you made, along with</li><li>the link to your github repo.</li></ul>",
        total: 15,
        req: [
            new Qu("README file lists the people in your group", 1),
            new Qu("README file lists the pages each person contributed", 1),
            new Qu("README file describes your branching model", 1),
            new Qu("All pages accessible from home page", 2.5),
            new Qu("Two pages from each group member", 2.5),
            new Qu("Each page has a title representing the name of the security risk", 2.5),
            new Qu("Each page provides a \"plain English\" description that demonstrates some comprehension of the risk", 4.5),
            new Qu("Submitted after 22/6", -1)
        ],
        fb: ['Plain-english could\'ve been a lot more \'plain\'']
    },
    assn3: {
        description: "Go to the terribly insecure site I've set up for us. Document security flaws. A regular text document is fine. For each issue, note: What the issue is, specifically, on this site. How a malicious user could exploit it. How you found it. What OWASP Top Ten category (or categories) it falls into. How to refactor the code or site architecture to remedy the issue. For the purposes of this exercise, there is a code comment in the `index.html` file at line 39 which asks you to pretend that data is being sent to a database. please write up at least 6.",
        fb: ["Here's the stuff I know was wrong: edit url to access files, various HTML headers not set, - Content-Security-Policy , - X-Frame-Options , - X-Content-Type-Options , - Referrer-Policy , - Permissions-Policy, bad password requirements, inputs allow XSS easily, client-side validation only, secure information stored in cookie in plain text, displays sensitive info in plain text, displays sensitive data based on URL params, uses easy-to-guess passwords, allows users without permission to see other data.", "Some solutions were not ideal, but solid understanding of the issues.", "Some of your remedies were light on detail, but solid understanding of the issues.", "Some of your remedies were light on detail, or weren't ideal, but solid understanding of the issues for the most part."],
        total: 5,
        req: [
            new Qu('Identified at least 6 issues', 5/6),
            new Qu('Each issue identified as it occurs on this site, specifically', 5/6),
            new Qu('Described how a malicious user could exploit each issue', 5/6),
            new Qu('Described how you found each issue', 5/6),
            new Qu('Identified appropriate OWASP category for each issue', 5/6),
            new Qu('Described how to refactor the code or site architecture to remedy each issue', 5/6),
            new Qu("Submitted after 27/7", -1)
        ]
    },
    lab8: {
        description: "Use an existing Netlify site of yours, or put together a new one (a one-pager is fine, but won't make setting the headers easier or harder - headers apply to the whole site unless you create exceptions). Follow the instructions for creating a custom HTTP header configuration. Pay attention to the note about disabling asset optimization. Make progress by inspecting the headers on your site through the browser devTools, checking and re-checking your grade on securityheaders.com (Mozilla Observatory works, too) and looking at what values you need to set for which headers. When you're ready, on Blackboard, submit both: A link to your repo, and A link to your securityheaders.com report",
        total: 3,
        req: [
        new Qu("A repo with a header configuration file in it that builds a Netlify site", 2.5), 
        new Qu("B+ or better from securityheaders.com", .5), 
        new Qu("Submitted after 16/7", -.5)],
        fb: ['.txt is a specific type of plain text format - just because something is a plain text file, does not mean it should be a \'.txt\' file. If you remove the \'.txt\' file extension, your headers should work.']
    },
    lab9: {
        description: "Option 1 Work in Codepen. On the page, create two HTML inputs. For the first input, when a user inputs a string, use it to create a keyword cipher. A keyword cipher maps the letters in the alphabet, and maps them onto a rearranged version of the alphabet. The rearrangement works like this: put the letters from the keyword (without duplication) at the beginning, followed by all remaining letters. So, for the keyword 'secretcode', the cipher would look like this: a    b    c    d    e    f    g    h    i    j    k    l    m    n    o    p    q    r    s    t    u    v    w    x    y    z s    e    c    r    t    o    d    a    b    f    g    h    i    j    k    l    m    n    p    q    u    v    w    z    y    z So if you were to encrypt the phrase \"the eagle flies at midnight\" with this cipher, it would read \"qat tsdht ohbtq sq ibrjbdaq\". For the second input, encrypt any letters which the user inputs using the cipher they established through the first input. Output the encrypted string on the page.<br><br>Option 2 Write, in plain English, a security plan that describes a website where users have a username, a password, and have their credit card information stored securely. Include as much detail using what we have learned over the last three weeks about how you would capture, transmit and store this information. Obviously, there are aspects of this that we haven't gone into great detail about. This is just a lab - don't feel like you need to do any outside research for this, just give as much information as you reasonably can based on the last 3 weeks. This should be about 400-500 words.",
        total: 3,
        req: [
            new Qu("Cipher assignment, or", 3),
            new Qu("Security plan", 3),
            new Qu("Submitted after 30/7", -.5)],
        fb: ["Would've been nice to see more of a focus on the website/UI/user flow, as opposed to describing general security principles."]
    },
    assn4: {
        description: "Deploy a site via Netlify that is built with a modern build tool (e.g. Vite).This site should be comprised of 4 pages. A landing page, from which all other pages are linked. Three other pages. (May I suggest the page names \"quality assurance\", \"security\", and \"bad example\".)",
        total: 10,
        req: [
            new Qu("Site created with a modern build tool (e.g. Vite)", 3),
            new Qu("Site version controlled in Github.", 1),
            new Qu("Site built/deployed via Netlify.", 1),
            new Qu("Site features a homepage that links to all other pages.", 1),
            new Qu("Assets are cache-busted.", 1),
            new Qu("JavaScript ES6 modules are bundled.", 1),
            new Qu("Sass is compiled.", 1),
            new Qu("Assets are minified.", 1),
            new Qu("Submitted after 10/8", -1)
        ],
        fb: ["I think you've missed the mark on how to version control a site like this. You should be be version controlling the files you're developing, including all your build tool configuration, not the end-result. In fact, the files you've version controlled here could, in fact be gitignored - since Netlify will build them for you.", "Not a requirement, but if you want to use external libraries (like Bootstrap), you should look into how to include them via npm, or just downloading them and including them with your assets  - they'll benefit from all the bundling and optimization you're running, and you won't get slowed down (or violate security policies) with their external CDN.", "Had to take a couple marks off because only your homepage is being fully built, and leveraging assets bundled and optimized with your build tool. To work with all pages, put them in your root, and use a vite.config.js file. This one by default: https://gist.github.com/simonborer/c5a5c1beba2f64eb9f22ff56b7c8fcf6 Or, if you're using ES6 imports (like with Mocha), this one: https://gist.github.com/simonborer/4ab0b12486703f46df664f22c9647a23"]
    },
    final: {
        description: "Deploy a site that documents its own security and quality assurance features. Feel free to extend your site from assignment 4. This site should be comprised of 4 pages:<ul><li>A landing page, from which all other pages are linked.</li><li>A \"quality assurance\" page.</li><li>A \"security\" page.</li><li>A \"bad example\" page.</li></ul>The Quality Assurance page should accurately describe all quality assurance measures involved in the production of your site, including, but not limited to:<ul><li>version control,</li><li>your branching model,</li><li>code linting,</li><li>code standards (including their enforcement),</li><li>unit testing,</li><li>end-to-end testing,</li><li>ad hoc testing tools,</li><li>build tools, and</li><li>deployment pipeline.</li></ul>The Quality Assurance page should also include a roadmap for additional QA measures that have not yet, but would ideally be, implemented.<br>The Security page should accurately describe all security measures involved in the production of your site, including, but not limited to:<ul><li>any security-related HTTP headers, their values, and their purpose,</li><li>any encryption of data in transit,</li><li>any security features that are a result of not doing things,</li><li>any security principles pertaining to the production of this site.</li></ul>Your \"bad example\" page should explain how you've included an example of what not to do for site security. Document this example, and explain why it's a bad idea, and how it could be avoided. Your example must not simply be an omitted or poorly formed HTTP header.",
        total: 20,
        req: [
new Qu("Site version controlled in Github and built/deployed via Netlify, featuring a homepage that links to all other pages.", 3),
new Qu("Site created with a modern build tool (e.g. Vite).", 2),
new Qu("Quality Assurance page accurately describes QA measures involved with the production of your site.", 2.5),
new Qu("QA measures implemented and described include code linting.", 2),
new Qu("QA measures implemented and described include unit testing.", 2),
new Qu("Security page accurately describes security measures included on your site.", 2.5),
new Qu("Security measures implemented and described include custom HTTP headers.", 2),
new Qu("Security measures implemented and described include defined security principles.", 2),
new Qu("The Bad Example page explains how to both violate and remedy a security practice. ", 1),
new Qu("The Bad Example page demonstrates and documents a live example of a bad security practice.", 1),
new Qu("Submitted after 17/8", -2)
        ]
    },
};

export { qa };